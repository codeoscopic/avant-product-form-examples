<html>
  <head>
    <title>
      Product Form Library Demo - You want to modify the product options of a
      quote
    </title>
    <%- include('../partials/head'); %>
  </head>

  <body>
    <%- include('../partials/navbar'); %>
    <main class="container">
      <div class="px-4 pt-5 my-5">
        <img class="d-block mx-auto mb-4" src="/public/logo-avnt2.svg" />
        <h1 class="display-5 fw-bold text-body-emphasis text-center">
          Product Form Library Demo
        </h1>
        <div class="col-lg-6 mx-auto mb-4">
          <p class="lead text-center">
            You want to modify the product options of a quote
          </p>
          <ul class="nav nav-tabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button
                class="nav-link active"
                id="quote-tab"
                data-bs-toggle="tab"
                data-bs-target="#quote"
                type="button"
                role="tab"
                aria-controls="quote"
                aria-selected="true"
              >
                Quote Object
              </button>
            </li>
          </ul>
          <div class="tab-content">
            <div
              class="tab-pane fade show active"
              id="quote"
              role="tabpanel"
              aria-labelledby="quote-tab"
            >
              <div class="alert alert-primary mt-3" role="alert">
                <b>See:</b>
                <a
                  href="https://portal.api-int.codeoscopic.io/#get-/insurances/-id-"
                  target="_blank"
                  >Retrieve an insurance project</a
                >
                or
                <a
                  href="https://portal.api-int.codeoscopic.io/#get-/insurances/-id-/offers/-offerId-"
                  target="_blank"
                  >Retrieve an insurance offer</a
                >
                <code>mainQuotes</code> and <code>addonQuotes</code>
                on API Portal
              </div>

              <div id="quote-editor" style="height: 400px"></div>
            </div>
          </div>
          <hr />
          <div class="mx-auto">
            <div class="mb-3">
              <label for="x-user-email" class="form-label"
                >Email of the user to execute the request in behalf of</label
              >
              <input
                type="email"
                class="form-control"
                id="x-user-email"
                placeholder="X-User-Email"
              />
            </div>
            <div class="mb-3">
              <label for="form-type" class="form-label"
                >Form type to render</label
              >
              <select class="form-select" id="form-type">
                <option value="ReRating">ReRating</option>
                <option value="PolicyApplication">PolicyApplication</option>
              </select>
            </div>
            <button
              id="render-product-form-btn"
              type="button"
              class="btn btn-primary my-2"
              onClick="renderProductForm()"
            >
              Render product form
            </button>
          </div>
        </div>
      </div>

      <div id="product-form-wrapper" style="display: none">
        <div class="px-4">
          <div class="card" id="product-form-card">
            <div class="card-body">
              <div id="product-form-iframe"></div>
            </div>
          </div>
        </div>

        <div class="px-4 d-md-flex justify-content-md-end">
          <button
            id="get-options-btn"
            type="button"
            class="btn btn-primary my-2"
            onClick="getProductFormOptions()"
            disabled
          >
            Get product options
          </button>
        </div>

        <div class="px-4 pt-2 pb-5">
          <div
            id="alert-error"
            class="alert alert-danger"
            style="display: none"
          ></div>
          <div id="product-options-viewer" style="height: 400px"></div>
        </div>
      </div>
    </main>
  </body>

  <%- include('../partials/footer'); %>
  <script
    async
    src="https://<%= process.env.CLIENT_PRODUCT_FORM_DOMAIN %>/js.js"
  ></script>
  <script>
    const getOptionsBtn = document.getElementById("get-options-btn");
    let productForm, quoteEditor;

    window.avantProductFormInit = () => {
      console.log("Avant Product Form Initialized");

      // Create new instance of AvantProductForm on the div with id "product-form-iframe"
      productForm = new AvantProductForm(
        // Set the id of the div where the iframe will be rendered
        "product-form-iframe",
        // Set the data callback function
        (request) => {
          return fetch("/api/product-form-requests", {
            method: "POST",
            body: JSON.stringify(request),
            headers: {
              "Content-Type": "application/json",
              "X-User-Email": document.getElementById("x-user-email").value,
              // Set the authorization header with your backend auth token if it is needed
              // Authorization: "your_backend_auth_token",
            },
          }).then(async (res) => {
            const response = await res.json();
            if (res.status === 200) {
              return response;
            }
            throw new Error(String(response.message || response.error));
          });
        }
      );

      quoteEditor = renderJsonEditor(document.getElementById("quote-editor"), {
        id: "0",
      });
    };
  </script>
  <script>
    async function renderProductForm() {
      const formTypeEl = document.getElementById("form-type");
      const productFormCardEl = document.getElementById("product-form-card");
      const renderProductFormBtn = document.getElementById(
        "render-product-form-btn"
      );
      const productFormWrapperEl = document.getElementById(
        "product-form-wrapper"
      );

      try {
        productFormWrapperEl.style.display = "block";
        renderProductFormBtn.disabled = true;
        alertErrorEl.style.display = "none";
        productFormCardEl.style.display = "block";
        getOptionsBtn.style.display = "block";

        const quote = quoteEditor.get();
        console.log("Using quote object:", quote);

        // Call render method with quote object
        await productForm.render(quote, formTypeEl.value);
        getOptionsBtn.disabled = false;
      } catch (error) {
        alertErrorEl.innerHTML = `Error: ${error}`;
        alertErrorEl.style.display = "block";
        getOptionsBtn.style.display = "none";
        productFormCardEl.style.display = "none";
      } finally {
        renderProductFormBtn.disabled = false;
      }
    }
  </script>
  <script>
    const alertErrorEl = document.getElementById("alert-error");
    const productOptionsViewerEl = document.getElementById(
      "product-options-viewer"
    );
    let productOptionsEditor;

    async function getProductFormOptions() {
      alertErrorEl.style.display = "none";

      try {
        const values = await productForm.getProductOptions();
        console.log("Product options:", values);
        if (!productOptionsEditor) {
          productOptionsEditor = renderJsonEditor(
            productOptionsViewerEl,
            values,
            { mode: "preview" }
          );
        } else {
          productOptionsEditor.update(values);
        }
      } catch (error) {
        alertErrorEl.innerHTML = "There are some validation errors.";
        alertErrorEl.style.display = "block";
      }
    }
  </script>
</html>
